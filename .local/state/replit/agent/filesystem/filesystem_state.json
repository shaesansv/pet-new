{"file_contents":{"README.md":{"content":"# PetShopForest üå≤\n\nA complete full-stack pet shop application with a magical forest theme, built with React TypeScript frontend and Express.js backend.\n\n## üöÄ Features\n\n- **Dark Forest Theme**: Beautiful, immersive UI with forest animations and dark green color scheme\n- **Real-time Updates**: WebSocket integration for live admin changes\n- **Admin Dashboard**: Complete CRUD operations for products, categories, and orders\n- **User Shopping Experience**: Product browsing, filtering, and checkout\n- **File Uploads**: Image upload support for products\n- **Responsive Design**: Mobile-friendly interface\n- **Authentication**: Secure admin authentication with session management\n\n## üõ†Ô∏è Tech Stack\n\n### Frontend\n- **Vite + React + TypeScript**: Modern development setup\n- **TailwindCSS**: Utility-first CSS framework with custom forest theme\n- **Wouter**: Lightweight routing\n- **TanStack Query**: Data fetching and caching\n- **WebSocket**: Real-time updates\n- **Shadcn/ui**: Beautiful UI components\n\n### Backend\n- **Express.js + TypeScript**: RESTful API server\n- **In-Memory Storage**: Fast development storage (easily replaceable with database)\n- **WebSocket (ws)**: Real-time communication\n- **Multer**: File upload handling\n- **Passport.js**: Authentication middleware\n- **Express Session**: Session management\n\n## üìÅ Project Structure\n\n","size_bytes":1351},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nPetShopForest is a full-stack pet shop application built with a magical forest theme. The application features a React TypeScript frontend and Express.js backend, providing complete e-commerce functionality including product browsing, admin management, real-time updates, and a complete checkout system. The app supports pet sales, food, and accessories with a beautiful dark forest-themed UI.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: Vite + React + TypeScript for modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state, React Context for global app state\n- **UI Components**: Shadcn/ui with Radix UI primitives for accessible components\n- **Styling**: TailwindCSS with custom forest theme (dark green color scheme)\n- **Real-time Communication**: WebSocket integration for live admin updates\n- **Authentication**: Session-based authentication with protected routes\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Data Storage**: In-memory storage with interface design for easy database migration\n- **Authentication**: Passport.js with local strategy and express-session\n- **File Handling**: Multer for image uploads with static file serving\n- **Real-time Updates**: WebSocket server using 'ws' library\n- **API Design**: RESTful API with separate admin and public endpoints\n\n## Data Models\nThe application uses a well-defined schema with the following entities:\n- **Users/Admins**: Authentication and role management\n- **Categories**: Product organization (Dogs, Cats, Fish, Birds, etc.)\n- **Products**: Pets, food, and accessories with images, pricing, and stock\n- **Orders**: Customer orders with product details and status tracking\n- **Site Settings**: Configurable site description and YouTube integration\n\n## File Upload System\n- **Storage**: Local file system under `/server/uploads`\n- **Processing**: Multer middleware with image validation and size limits\n- **Serving**: Static file serving through Express\n\n## Real-time Features\nWebSocket implementation provides live updates for:\n- Category management changes\n- Product inventory updates\n- New order notifications\n- Site settings modifications\n\n## Development Tools\n- **Build System**: Vite for frontend bundling and development\n- **Database Migration Ready**: Drizzle ORM configuration for PostgreSQL migration\n- **Type Safety**: Shared TypeScript schemas between frontend and backend\n- **Development Experience**: Hot reloading, error overlays, and development banners\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **@vitejs/plugin-react**: React integration for Vite\n- **express**: Web framework for Node.js\n- **typescript**: Type checking and compilation\n\n## Frontend Libraries\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight React router\n- **@radix-ui/***: Headless UI component primitives\n- **tailwindcss**: Utility-first CSS framework\n- **clsx**: Conditional className utility\n\n## Backend Libraries\n- **passport**: Authentication middleware\n- **passport-local**: Local authentication strategy\n- **express-session**: Session management\n- **multer**: File upload handling\n- **ws**: WebSocket implementation\n\n## Database/Storage\n- **@neondatabase/serverless**: Neon database driver (prepared for migration)\n- **drizzle-orm**: Type-safe ORM\n- **drizzle-zod**: Schema validation integration\n- **connect-pg-simple**: PostgreSQL session store (for production)\n\n## Development Dependencies\n- **@replit/vite-plugin-***: Replit-specific development tools\n- **esbuild**: JavaScript bundler for production builds\n\n## UI and Styling\n- **class-variance-authority**: Component variant management\n- **tailwind-merge**: Tailwind class merging utility\n- **lucide-react**: Icon library\n\nThe application is designed with production scalability in mind, using in-memory storage for rapid development while maintaining interfaces that allow easy migration to PostgreSQL using the already configured Drizzle ORM setup.","size_bytes":4137},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        forest: {\n          dark: \"var(--forest-dark)\",\n          medium: \"var(--forest-medium)\",\n          light: \"var(--forest-light)\",\n          accent: \"var(--forest-accent)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px) rotate(0deg)\" },\n          \"50%\": { transform: \"translateY(-10px) rotate(5deg)\" },\n        },\n        leafFall: {\n          \"0%\": { transform: \"translateY(-100vh) translateX(0) rotate(0deg)\", opacity: \"0\" },\n          \"10%\": { opacity: \"1\" },\n          \"90%\": { opacity: \"1\" },\n          \"100%\": { transform: \"translateY(100vh) translateX(50px) rotate(360deg)\", opacity: \"0\" },\n        },\n        surprise: {\n          \"0%\": { transform: \"scale(0.8) rotate(-5deg)\", opacity: \"0\" },\n          \"50%\": { transform: \"scale(1.1) rotate(2deg)\", opacity: \"1\" },\n          \"100%\": { transform: \"scale(1) rotate(0deg)\", opacity: \"1\" },\n        },\n        fadeIn: {\n          \"0%\": { opacity: \"0\", transform: \"translateY(20px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        float: \"float 6s ease-in-out infinite\",\n        \"leaf-fall\": \"leafFall 8s linear infinite\",\n        surprise: \"surprise 0.8s ease-out\",\n        \"fade-in\": \"fadeIn 0.6s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3998},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":2700},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { insertCategorySchema, insertProductSchema, insertOrderSchema, updateSiteSettingsSchema } from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, path.join(process.cwd(), \"server\", \"uploads\"));\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1E9);\n      cb(null, file.fieldname + \"-\" + uniqueSuffix + path.extname(file.originalname));\n    },\n  }),\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith(\"image/\")) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Only image files are allowed\"));\n    }\n  },\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n});\n\n// WebSocket clients for real-time updates\nlet wsClients: Set<WebSocket> = new Set();\n\nfunction broadcastUpdate(event: string, data: any) {\n  const message = JSON.stringify({ event, data });\n  wsClients.forEach(client => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(message);\n    }\n  });\n}\n\n// Middleware to check admin authentication\nfunction requireAdmin(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\nexport function registerRoutes(app: Express): Server {\n  // Setup authentication routes\n  setupAuth(app);\n  \n  // Serve uploaded files statically\n  app.use(\"/uploads\", express.static(path.join(process.cwd(), \"server\", \"uploads\")));\n\n  // Public routes\n  \n  // Get site settings (public)\n  app.get(\"/api/public/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSiteSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch site settings\" });\n    }\n  });\n\n  // Get categories (public)\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Get single category (public)\n  app.get(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const category = await storage.getCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  // Get products with filters (public)\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const filters = {\n        categoryId: req.query.categoryId as string,\n        type: req.query.type as string,\n        species: req.query.species as string,\n      };\n      const products = await storage.getProducts(filters);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Get single product (public)\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Place order (public)\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const validatedData = insertOrderSchema.parse(req.body);\n      \n      // Get products and validate stock\n      const productIds = validatedData.products.map(p => p.productId);\n      const products = await Promise.all(productIds.map(id => storage.getProduct(id)));\n      \n      if (products.some(p => !p)) {\n        return res.status(400).json({ message: \"One or more products not found\" });\n      }\n      \n      // Check stock availability\n      for (const orderProduct of validatedData.products) {\n        const product = products.find(p => p?.id === orderProduct.productId);\n        if (!product || product.stock < orderProduct.quantity) {\n          return res.status(400).json({ \n            message: `Insufficient stock for product: ${product?.name}` \n          });\n        }\n      }\n      \n      // Create order\n      const order = await storage.createOrder(validatedData, products.filter(Boolean) as any[]);\n      \n      // Update product stock atomically\n      for (const orderProduct of validatedData.products) {\n        const product = products.find(p => p?.id === orderProduct.productId);\n        if (product) {\n          await storage.updateProductStock(product.id, product.stock - orderProduct.quantity);\n        }\n      }\n      \n      // Broadcast order created event\n      broadcastUpdate(\"order:created\", order);\n      \n      res.status(201).json(order);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create order\" });\n    }\n  });\n\n  // Admin protected routes\n  \n  // Update site settings\n  app.put(\"/api/admin/site\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = updateSiteSettingsSchema.parse(req.body);\n      const settings = await storage.updateSiteSettings(validatedData);\n      \n      // Broadcast settings updated event\n      broadcastUpdate(\"settings:updated\", settings);\n      \n      res.json(settings);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to update site settings\" });\n    }\n  });\n\n  // Category management\n  app.post(\"/api/admin/categories\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedData);\n      \n      broadcastUpdate(\"category:created\", category);\n      \n      res.status(201).json(category);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create category\" });\n    }\n  });\n\n  app.put(\"/api/admin/categories/:id\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.updateCategory(req.params.id, validatedData);\n      \n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      broadcastUpdate(\"category:updated\", category);\n      \n      res.json(category);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/admin/categories/:id\", requireAdmin, async (req, res) => {\n    try {\n      const deleted = await storage.deleteCategory(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      broadcastUpdate(\"category:deleted\", { id: req.params.id });\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Product management\n  app.post(\"/api/admin/products\", requireAdmin, upload.array(\"images\", 5), async (req, res) => {\n    try {\n      const productData = JSON.parse(req.body.productData || \"{}\");\n      const validatedData = insertProductSchema.parse(productData);\n      \n      const product = await storage.createProduct(validatedData);\n      \n      // Handle uploaded images\n      if (req.files && Array.isArray(req.files)) {\n        const imagePaths = req.files.map(file => `/uploads/${file.filename}`);\n        await storage.updateProductImages(product.id, imagePaths);\n        product.images = imagePaths;\n      }\n      \n      broadcastUpdate(\"product:created\", product);\n      \n      res.status(201).json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/admin/products/:id\", requireAdmin, upload.array(\"images\", 5), async (req, res) => {\n    try {\n      const productData = JSON.parse(req.body.productData || \"{}\");\n      const validatedData = insertProductSchema.parse(productData);\n      \n      const product = await storage.updateProduct(req.params.id, validatedData);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      // Handle uploaded images if provided\n      if (req.files && Array.isArray(req.files) && req.files.length > 0) {\n        const imagePaths = req.files.map(file => `/uploads/${file.filename}`);\n        await storage.updateProductImages(product.id, imagePaths);\n        product.images = imagePaths;\n      }\n      \n      broadcastUpdate(\"product:updated\", product);\n      \n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/admin/products/:id\", requireAdmin, async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      broadcastUpdate(\"product:deleted\", { id: req.params.id });\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Order management\n  app.get(\"/api/admin/orders\", requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/admin/orders/:id\", requireAdmin, async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.put(\"/api/admin/orders/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (![\"pending\", \"completed\", \"cancelled\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n      \n      const order = await storage.updateOrderStatus(req.params.id, status);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      broadcastUpdate(\"order:updated\", order);\n      \n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Create HTTP server\n  const httpServer = createServer(app);\n\n  // Setup WebSocket server\n  const wss = new WebSocketServer({ server: httpServer, path: \"/ws\" });\n  \n  wss.on(\"connection\", (ws) => {\n    wsClients.add(ws);\n    \n    ws.on(\"close\", () => {\n      wsClients.delete(ws);\n    });\n    \n    ws.on(\"error\", (error) => {\n      console.error(\"WebSocket error:\", error);\n      wsClients.delete(ws);\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":11303},"server/seed.ts":{"content":"import { storage } from \"./storage\";\nimport { scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function seedDatabase() {\n  console.log(\"üå± Starting database seed...\");\n\n  try {\n    // Create admin user\n    console.log(\"Creating admin user...\");\n    const hashedPassword = await hashPassword(\"admin123\");\n    await storage.createUser({\n      username: \"admin\",\n      password: hashedPassword,\n    });\n    console.log(\"‚úÖ Admin user created (username: admin, password: admin123)\");\n\n    // Create categories\n    console.log(\"Creating categories...\");\n    const dogCategory = await storage.createCategory({\n      name: \"Dogs\",\n      description: \"Products and companions for dog lovers\",\n    });\n\n    const catCategory = await storage.createCategory({\n      name: \"Cats\",\n      description: \"Everything for your feline friends\",\n    });\n\n    const fishCategory = await storage.createCategory({\n      name: \"Fish\",\n      description: \"Aquatic pets and aquarium supplies\",\n    });\n\n    const birdCategory = await storage.createCategory({\n      name: \"Birds\",\n      description: \"Feathered friends and bird care products\",\n    });\n\n    console.log(\"‚úÖ Categories created\");\n\n    // Create sample products\n    console.log(\"Creating sample products...\");\n\n    // Dog products\n    await storage.createProduct({\n      name: \"Golden Retriever Puppy\",\n      categoryId: dogCategory.id,\n      type: \"pet\",\n      species: \"Dog\",\n      description: \"Friendly and energetic golden retriever puppy, perfect for families with children. Well-socialized and health-checked.\",\n      priceInINR: 25000,\n      stock: 2,\n      available: true,\n    });\n\n    await storage.createProduct({\n      name: \"Premium Dog Food - Adult\",\n      categoryId: dogCategory.id,\n      type: \"food\",\n      species: \"Dog\",\n      description: \"High-quality dry dog food with real chicken, perfect for adult dogs. Contains essential nutrients for healthy growth.\",\n      priceInINR: 1200,\n      stock: 15,\n      available: true,\n    });\n\n    await storage.createProduct({\n      name: \"Dog Leash and Collar Set\",\n      categoryId: dogCategory.id,\n      type: \"accessory\",\n      species: \"Dog\",\n      description: \"Durable leather leash with matching collar, adjustable and comfortable for daily walks.\",\n      priceInINR: 800,\n      stock: 8,\n      available: true,\n    });\n\n    // Cat products\n    await storage.createProduct({\n      name: \"Persian Kitten\",\n      categoryId: catCategory.id,\n      type: \"pet\",\n      species: \"Cat\",\n      description: \"Beautiful Persian kitten with long, fluffy coat. Very gentle and perfect for indoor living.\",\n      priceInINR: 18000,\n      stock: 3,\n      available: true,\n    });\n\n    await storage.createProduct({\n      name: \"Premium Cat Food - Kitten\",\n      categoryId: catCategory.id,\n      type: \"food\",\n      species: \"Cat\",\n      description: \"Specially formulated dry food for kittens with DHA for brain development and calcium for strong bones.\",\n      priceInINR: 900,\n      stock: 20,\n      available: true,\n    });\n\n    await storage.createProduct({\n      name: \"Cat Scratching Post\",\n      categoryId: catCategory.id,\n      type: \"accessory\",\n      species: \"Cat\",\n      description: \"Multi-level scratching post with sisal rope and cozy hideout, perfect for active cats.\",\n      priceInINR: 2500,\n      stock: 5,\n      available: true,\n    });\n\n    // Fish products\n    await storage.createProduct({\n      name: \"Tropical Angelfish Pair\",\n      categoryId: fishCategory.id,\n      type: \"pet\",\n      species: \"Fish\",\n      description: \"Beautiful pair of angelfish, perfect for community aquariums. Hardy and easy to care for.\",\n      priceInINR: 350,\n      stock: 12,\n      available: true,\n    });\n\n    await storage.createProduct({\n      name: \"Aquarium Fish Food Flakes\",\n      categoryId: fishCategory.id,\n      type: \"food\",\n      species: \"Fish\",\n      description: \"High-quality fish flakes with vitamins and minerals for tropical fish. Enhances color and promotes growth.\",\n      priceInINR: 250,\n      stock: 30,\n      available: true,\n    });\n\n    await storage.createProduct({\n      name: \"10 Gallon Aquarium Kit\",\n      categoryId: fishCategory.id,\n      type: \"accessory\",\n      species: \"Fish\",\n      description: \"Complete aquarium kit with filter, heater, and LED lighting. Perfect starter tank for beginners.\",\n      priceInINR: 4500,\n      stock: 3,\n      available: true,\n    });\n\n    // Bird products\n    await storage.createProduct({\n      name: \"Cockatiel Pair\",\n      categoryId: birdCategory.id,\n      type: \"pet\",\n      species: \"Bird\",\n      description: \"Friendly and social cockatiel pair. Hand-fed and very tame, great for families.\",\n      priceInINR: 8000,\n      stock: 4,\n      available: true,\n    });\n\n    await storage.createProduct({\n      name: \"Bird Seed Mix\",\n      categoryId: birdCategory.id,\n      type: \"food\",\n      species: \"Bird\",\n      description: \"Nutritious seed mix for cockatiels and small parrots. Contains sunflower seeds, millet, and safflower.\",\n      priceInINR: 400,\n      stock: 25,\n      available: true,\n    });\n\n    await storage.createProduct({\n      name: \"Large Bird Cage\",\n      categoryId: birdCategory.id,\n      type: \"accessory\",\n      species: \"Bird\",\n      description: \"Spacious bird cage with multiple perches and feeding stations. Easy to clean with removable tray.\",\n      priceInINR: 6500,\n      stock: 2,\n      available: true,\n    });\n\n    console.log(\"‚úÖ Sample products created\");\n\n    // Update site settings\n    console.log(\"Updating site settings...\");\n    await storage.updateSiteSettings({\n      description: \"Welcome to PetShopForest, your magical destination for pets, premium food, and accessories in our enchanted forest marketplace. Every creature deserves the finest care nature can provide. Discover healthy pets from trusted sources, nutritious food for every life stage, and quality accessories to keep your companions happy and thriving.\",\n      youtubeUrl: \"https://www.youtube.com/embed/hFZFjoX2cGg\", // Sample pet video\n    });\n    console.log(\"‚úÖ Site settings updated\");\n\n    console.log(\"üéâ Database seeding completed successfully!\");\n    console.log(\"\\nüìã Summary:\");\n    console.log(\"- Admin user: username=admin, password=admin123\");\n    console.log(\"- Categories: Dogs, Cats, Fish, Birds\");\n    console.log(\"- Products: 12 sample products across all categories\");\n    console.log(\"- Site settings: Updated with description and YouTube video\");\n\n  } catch (error) {\n    console.error(\"‚ùå Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run the seed function if this file is executed directly\nif (require.main === module) {\n  seedDatabase().catch((error) => {\n    console.error(\"Failed to seed database:\", error);\n    process.exit(1);\n  });\n}\n\nexport { seedDatabase };\n","size_bytes":7080},"server/storage.ts":{"content":"import { type Admin, type InsertAdmin, type Category, type InsertCategory, type Product, type InsertProduct, type Order, type InsertOrder, type SiteSettings, type UpdateSiteSettings, type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\n\nconst MemoryStore = createMemoryStore(session);\n\nexport interface IStorage {\n  // User methods (for auth compatibility)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Admin methods\n  getAdmin(id: string): Promise<Admin | undefined>;\n  getAdminByEmail(email: string): Promise<Admin | undefined>;\n  createAdmin(admin: InsertAdmin): Promise<Admin>;\n  \n  // Category methods\n  getCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n  \n  // Product methods\n  getProducts(filters?: { categoryId?: string; type?: string; species?: string }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  updateProductImages(id: string, images: string[]): Promise<Product | undefined>;\n  updateProductStock(id: string, newStock: number): Promise<Product | undefined>;\n  \n  // Order methods\n  getOrders(): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder, products: Product[]): Promise<Order>;\n  updateOrderStatus(id: string, status: \"pending\" | \"completed\" | \"cancelled\"): Promise<Order | undefined>;\n  \n  // Site settings methods\n  getSiteSettings(): Promise<SiteSettings>;\n  updateSiteSettings(settings: UpdateSiteSettings): Promise<SiteSettings>;\n  \n  // Session store\n  sessionStore: session.Store;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private admins: Map<string, Admin>;\n  private categories: Map<string, Category>;\n  private products: Map<string, Product>;\n  private orders: Map<string, Order>;\n  private siteSettings: SiteSettings;\n  public sessionStore: session.Store;\n\n  constructor() {\n    this.users = new Map();\n    this.admins = new Map();\n    this.categories = new Map();\n    this.products = new Map();\n    this.orders = new Map();\n    \n    // Initialize default site settings\n    this.siteSettings = {\n      id: \"default\",\n      description: \"Discover a magical world of pets, premium food, and accessories in our enchanted forest marketplace. Every creature deserves the finest care nature can provide.\",\n      youtubeUrl: \"https://www.youtube.com/embed/dQw4w9WgXcQ\",\n      updatedAt: new Date(),\n    };\n    \n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    });\n  }\n\n  // User methods (for auth compatibility)\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Admin methods\n  async getAdmin(id: string): Promise<Admin | undefined> {\n    return this.admins.get(id);\n  }\n\n  async getAdminByEmail(email: string): Promise<Admin | undefined> {\n    return Array.from(this.admins.values()).find(admin => admin.email === email);\n  }\n\n  async createAdmin(insertAdmin: InsertAdmin): Promise<Admin> {\n    const id = randomUUID();\n    const admin: Admin = {\n      ...insertAdmin,\n      id,\n      role: \"admin\",\n      createdAt: new Date(),\n    };\n    this.admins.set(id, admin);\n    return admin;\n  }\n\n  // Category methods\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values()).sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const slug = insertCategory.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');\n    const category: Category = {\n      ...insertCategory,\n      id,\n      slug,\n      createdAt: new Date(),\n    };\n    this.categories.set(id, category);\n    return category;\n  }\n\n  async updateCategory(id: string, updateData: Partial<InsertCategory>): Promise<Category | undefined> {\n    const category = this.categories.get(id);\n    if (!category) return undefined;\n    \n    const updatedCategory: Category = {\n      ...category,\n      ...updateData,\n      slug: updateData.name ? updateData.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '') : category.slug,\n    };\n    this.categories.set(id, updatedCategory);\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    return this.categories.delete(id);\n  }\n\n  // Product methods\n  async getProducts(filters?: { categoryId?: string; type?: string; species?: string }): Promise<Product[]> {\n    let products = Array.from(this.products.values());\n    \n    if (filters?.categoryId) {\n      products = products.filter(p => p.categoryId === filters.categoryId);\n    }\n    if (filters?.type) {\n      products = products.filter(p => p.type === filters.type);\n    }\n    if (filters?.species) {\n      products = products.filter(p => p.species === filters.species);\n    }\n    \n    return products.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      images: [],\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    \n    const updatedProduct: Product = {\n      ...product,\n      ...updateData,\n    };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  async updateProductImages(id: string, images: string[]): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    \n    product.images = images;\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProductStock(id: string, newStock: number): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    \n    product.stock = newStock;\n    this.products.set(id, product);\n    return product;\n  }\n\n  // Order methods\n  async getOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values()).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async createOrder(insertOrder: InsertOrder, products: Product[]): Promise<Order> {\n    const id = randomUUID();\n    \n    // Calculate order details\n    const orderProducts = insertOrder.products.map(orderProduct => {\n      const product = products.find(p => p.id === orderProduct.productId);\n      if (!product) throw new Error(`Product ${orderProduct.productId} not found`);\n      \n      return {\n        productId: orderProduct.productId,\n        name: product.name,\n        priceInINR: product.priceInINR,\n        quantity: orderProduct.quantity,\n      };\n    });\n    \n    const totalAmountINR = orderProducts.reduce((total, product) => \n      total + (product.priceInINR * product.quantity), 0\n    );\n    \n    const order: Order = {\n      id,\n      products: orderProducts,\n      customer: insertOrder.customer,\n      totalAmountINR,\n      status: \"pending\",\n      createdAt: new Date(),\n    };\n    \n    this.orders.set(id, order);\n    return order;\n  }\n\n  async updateOrderStatus(id: string, status: \"pending\" | \"completed\" | \"cancelled\"): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    \n    order.status = status;\n    this.orders.set(id, order);\n    return order;\n  }\n\n  // Site settings methods\n  async getSiteSettings(): Promise<SiteSettings> {\n    return this.siteSettings;\n  }\n\n  async updateSiteSettings(settings: UpdateSiteSettings): Promise<SiteSettings> {\n    this.siteSettings = {\n      ...this.siteSettings,\n      ...settings,\n      updatedAt: new Date(),\n    };\n    return this.siteSettings;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9297},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Admin schema\nexport const admins = {\n  id: z.string(),\n  name: z.string(),\n  email: z.string().email(),\n  password: z.string(),\n  role: z.enum([\"admin\"]).default(\"admin\"),\n  createdAt: z.date().default(() => new Date()),\n};\n\nexport const insertAdminSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport type InsertAdmin = z.infer<typeof insertAdminSchema>;\nexport type Admin = {\n  id: string;\n  name: string;\n  email: string;\n  password: string;\n  role: \"admin\";\n  createdAt: Date;\n};\n\n// Category schema\nexport const categories = {\n  id: z.string(),\n  name: z.string(),\n  slug: z.string(),\n  description: z.string(),\n  createdAt: z.date().default(() => new Date()),\n};\n\nexport const insertCategorySchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional().default(\"\"),\n});\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = {\n  id: string;\n  name: string;\n  slug: string;\n  description: string;\n  createdAt: Date;\n};\n\n// Product schema\nexport const products = {\n  id: z.string(),\n  name: z.string(),\n  categoryId: z.string(),\n  type: z.enum([\"pet\", \"food\", \"accessory\"]),\n  species: z.string().optional(),\n  images: z.array(z.string()).default([]),\n  description: z.string(),\n  priceInINR: z.number().positive(),\n  stock: z.number().min(0),\n  available: z.boolean().default(true),\n  createdAt: z.date().default(() => new Date()),\n};\n\nexport const insertProductSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  type: z.enum([\"pet\", \"food\", \"accessory\"]),\n  species: z.string().optional(),\n  description: z.string().min(1, \"Description is required\"),\n  priceInINR: z.number().positive(\"Price must be positive\"),\n  stock: z.number().min(0, \"Stock cannot be negative\"),\n  available: z.boolean().default(true),\n});\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = {\n  id: string;\n  name: string;\n  categoryId: string;\n  type: \"pet\" | \"food\" | \"accessory\";\n  species?: string;\n  images: string[];\n  description: string;\n  priceInINR: number;\n  stock: number;\n  available: boolean;\n  createdAt: Date;\n};\n\n// Order schema\nexport const orders = {\n  id: z.string(),\n  products: z.array(z.object({\n    productId: z.string(),\n    name: z.string(),\n    priceInINR: z.number(),\n    quantity: z.number(),\n  })),\n  customer: z.object({\n    name: z.string(),\n    phone: z.string(),\n    altPhone: z.string().optional(),\n    address: z.string(),\n  }),\n  totalAmountINR: z.number(),\n  status: z.enum([\"pending\", \"completed\", \"cancelled\"]).default(\"pending\"),\n  createdAt: z.date().default(() => new Date()),\n};\n\nexport const insertOrderSchema = z.object({\n  products: z.array(z.object({\n    productId: z.string(),\n    quantity: z.number().positive(),\n  })).min(1, \"At least one product is required\"),\n  customer: z.object({\n    name: z.string().min(1, \"Name is required\"),\n    phone: z.string().min(10, \"Valid phone number is required\"),\n    altPhone: z.string().optional(),\n    address: z.string().min(1, \"Address is required\"),\n  }),\n});\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = {\n  id: string;\n  products: Array<{\n    productId: string;\n    name: string;\n    priceInINR: number;\n    quantity: number;\n  }>;\n  customer: {\n    name: string;\n    phone: string;\n    altPhone?: string;\n    address: string;\n  };\n  totalAmountINR: number;\n  status: \"pending\" | \"completed\" | \"cancelled\";\n  createdAt: Date;\n};\n\n// Site settings schema\nexport const siteSettings = {\n  id: z.string(),\n  description: z.string(),\n  youtubeUrl: z.string(),\n  updatedAt: z.date().default(() => new Date()),\n};\n\nexport const updateSiteSettingsSchema = z.object({\n  description: z.string().min(1, \"Description is required\"),\n  youtubeUrl: z.string().url(\"Invalid YouTube URL\").optional().default(\"\"),\n});\n\nexport type UpdateSiteSettings = z.infer<typeof updateSiteSettingsSchema>;\nexport type SiteSettings = {\n  id: string;\n  description: string;\n  youtubeUrl: string;\n  updatedAt: Date;\n};\n\n// Legacy User schema for auth compatibility\nexport const users = {\n  id: z.string(),\n  username: z.string(),\n  password: z.string(),\n};\n\nexport const insertUserSchema = z.object({\n  username: z.string().min(1),\n  password: z.string().min(6),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = {\n  id: string;\n  username: string;\n  password: string;\n};\n","size_bytes":4650},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport { AppProvider } from \"./context/app-context\";\nimport NotFound from \"@/pages/not-found\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <AppProvider>\n            <Toaster />\n            <Router />\n          </AppProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1186},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Crimson+Text:wght@400;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(168, 65%, 6%);\n  --foreground: hsl(60, 9%, 98%);\n  --card: hsl(167, 47%, 11%);\n  --card-foreground: hsl(60, 9%, 98%);\n  --popover: hsl(167, 47%, 11%);\n  --popover-foreground: hsl(60, 9%, 98%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(60, 9%, 98%);\n  --secondary: hsl(167, 47%, 15%);\n  --secondary-foreground: hsl(60, 9%, 98%);\n  --muted: hsl(167, 47%, 15%);\n  --muted-foreground: hsl(60, 5%, 65%);\n  --accent: hsl(142, 69%, 58%);\n  --accent-foreground: hsl(167, 65%, 6%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --border: hsl(167, 47%, 20%);\n  --input: hsl(167, 47%, 15%);\n  --ring: hsl(142, 76%, 36%);\n  --chart-1: hsl(142, 76%, 36%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(167, 47%, 11%);\n  --sidebar-foreground: hsl(60, 9%, 98%);\n  --sidebar-primary: hsl(142, 76%, 36%);\n  --sidebar-primary-foreground: hsl(60, 9%, 98%);\n  --sidebar-accent: hsl(167, 47%, 15%);\n  --sidebar-accent-foreground: hsl(142, 69%, 58%);\n  --sidebar-border: hsl(167, 47%, 20%);\n  --sidebar-ring: hsl(142, 76%, 36%);\n  --forest-dark: hsl(168, 65%, 6%);\n  --forest-medium: hsl(167, 47%, 11%);\n  --forest-light: hsl(167, 47%, 20%);\n  --forest-accent: hsl(142, 76%, 36%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Crimson Text', serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 1px 2px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 1px 2px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 2px 4px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 4px 6px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00), 0px 8px 10px -1px hsl(142, 76%, 36% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(142, 76%, 36% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, \n      hsl(168, 65%, 6%) 0%, \n      hsl(167, 55%, 8%) 50%, \n      hsl(168, 65%, 6%) 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  .forest-card {\n    background: linear-gradient(145deg, \n      hsl(167, 47%, 11%) 0%, \n      hsl(167, 47%, 13%) 100%);\n    border: 1px solid hsl(167, 47%, 20%);\n    backdrop-filter: blur(10px);\n  }\n\n  .leaf-particle {\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    background: hsl(142, 69%, 58%);\n    border-radius: 50% 0;\n    animation: leafFall 8s linear infinite;\n  }\n\n  .leaf-particle:nth-child(2) { \n    left: 20%; \n    animation-delay: -2s; \n    animation-duration: 6s; \n  }\n  \n  .leaf-particle:nth-child(3) { \n    left: 40%; \n    animation-delay: -4s; \n    animation-duration: 10s; \n  }\n  \n  .leaf-particle:nth-child(4) { \n    left: 60%; \n    animation-delay: -1s; \n    animation-duration: 7s; \n  }\n  \n  .leaf-particle:nth-child(5) { \n    left: 80%; \n    animation-delay: -3s; \n    animation-duration: 9s; \n  }\n}\n\n@layer utilities {\n  @keyframes float {\n    0%, 100% { transform: translateY(0px) rotate(0deg); }\n    50% { transform: translateY(-10px) rotate(5deg); }\n  }\n\n  @keyframes leafFall {\n    0% { transform: translateY(-100vh) translateX(0) rotate(0deg); opacity: 0; }\n    10% { opacity: 1; }\n    90% { opacity: 1; }\n    100% { transform: translateY(100vh) translateX(50px) rotate(360deg); opacity: 0; }\n  }\n\n  @keyframes surprise {\n    0% { transform: scale(0.8) rotate(-5deg); opacity: 0; }\n    50% { transform: scale(1.1) rotate(2deg); opacity: 1; }\n    100% { transform: scale(1) rotate(0deg); opacity: 1; }\n  }\n\n  @keyframes fadeIn {\n    0% { opacity: 0; transform: translateY(20px); }\n    100% { opacity: 1; transform: translateY(0); }\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-leaf-fall {\n    animation: leafFall 8s linear infinite;\n  }\n\n  .animate-surprise {\n    animation: surprise 0.8s ease-out;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out;\n  }\n}\n","size_bytes":4576},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/api/admin.api.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { Category, InsertCategory, SiteSettings, UpdateSiteSettings } from \"@shared/schema\";\n\nexport const adminApi = {\n  // Site settings\n  getSiteSettings: async (): Promise<SiteSettings> => {\n    const res = await fetch(\"/api/public/settings\");\n    if (!res.ok) throw new Error(\"Failed to fetch site settings\");\n    return res.json();\n  },\n\n  updateSiteSettings: async (settings: UpdateSiteSettings): Promise<SiteSettings> => {\n    const res = await apiRequest(\"PUT\", \"/api/admin/site\", settings);\n    return res.json();\n  },\n\n  // Categories\n  getCategories: async (): Promise<Category[]> => {\n    const res = await fetch(\"/api/categories\");\n    if (!res.ok) throw new Error(\"Failed to fetch categories\");\n    return res.json();\n  },\n\n  getCategory: async (id: string): Promise<Category> => {\n    const res = await fetch(`/api/categories/${id}`);\n    if (!res.ok) throw new Error(\"Failed to fetch category\");\n    return res.json();\n  },\n\n  createCategory: async (categoryData: InsertCategory): Promise<Category> => {\n    const res = await apiRequest(\"POST\", \"/api/admin/categories\", categoryData);\n    return res.json();\n  },\n\n  updateCategory: async (id: string, categoryData: InsertCategory): Promise<Category> => {\n    const res = await apiRequest(\"PUT\", `/api/admin/categories/${id}`, categoryData);\n    return res.json();\n  },\n\n  deleteCategory: async (id: string): Promise<void> => {\n    const res = await apiRequest(\"DELETE\", `/api/admin/categories/${id}`);\n    if (!res.ok) throw new Error(\"Failed to delete category\");\n  },\n};\n","size_bytes":1593},"client/src/api/orders.api.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { Order, InsertOrder } from \"@shared/schema\";\n\nexport const ordersApi = {\n  // Public endpoints\n  createOrder: async (orderData: InsertOrder): Promise<Order> => {\n    const res = await apiRequest(\"POST\", \"/api/orders\", orderData);\n    return res.json();\n  },\n\n  // Admin endpoints\n  getOrders: async (): Promise<Order[]> => {\n    const res = await fetch(\"/api/admin/orders\", {\n      credentials: \"include\",\n    });\n    if (!res.ok) throw new Error(\"Failed to fetch orders\");\n    return res.json();\n  },\n\n  getOrder: async (id: string): Promise<Order> => {\n    const res = await fetch(`/api/admin/orders/${id}`, {\n      credentials: \"include\",\n    });\n    if (!res.ok) throw new Error(\"Failed to fetch order\");\n    return res.json();\n  },\n\n  updateOrderStatus: async (id: string, status: \"pending\" | \"completed\" | \"cancelled\"): Promise<Order> => {\n    const res = await apiRequest(\"PUT\", `/api/admin/orders/${id}/status`, { status });\n    return res.json();\n  },\n};\n","size_bytes":1025},"client/src/api/products.api.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { Product, InsertProduct } from \"@shared/schema\";\n\nexport const productsApi = {\n  // Public endpoints\n  getProducts: async (filters?: { categoryId?: string; type?: string; species?: string }): Promise<Product[]> => {\n    const searchParams = new URLSearchParams();\n    if (filters?.categoryId) searchParams.set(\"categoryId\", filters.categoryId);\n    if (filters?.type) searchParams.set(\"type\", filters.type);\n    if (filters?.species) searchParams.set(\"species\", filters.species);\n    \n    const url = `/api/products${searchParams.toString() ? `?${searchParams.toString()}` : \"\"}`;\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(\"Failed to fetch products\");\n    return res.json();\n  },\n\n  getProduct: async (id: string): Promise<Product> => {\n    const res = await fetch(`/api/products/${id}`);\n    if (!res.ok) throw new Error(\"Failed to fetch product\");\n    return res.json();\n  },\n\n  // Admin endpoints\n  createProduct: async (productData: InsertProduct, images?: FileList): Promise<Product> => {\n    const formData = new FormData();\n    formData.append(\"productData\", JSON.stringify(productData));\n    \n    if (images) {\n      Array.from(images).forEach(file => {\n        formData.append(\"images\", file);\n      });\n    }\n\n    const res = await fetch(\"/api/admin/products\", {\n      method: \"POST\",\n      body: formData,\n      credentials: \"include\",\n    });\n    \n    if (!res.ok) throw new Error(\"Failed to create product\");\n    return res.json();\n  },\n\n  updateProduct: async (id: string, productData: Partial<InsertProduct>, images?: FileList): Promise<Product> => {\n    const formData = new FormData();\n    formData.append(\"productData\", JSON.stringify(productData));\n    \n    if (images) {\n      Array.from(images).forEach(file => {\n        formData.append(\"images\", file);\n      });\n    }\n\n    const res = await fetch(`/api/admin/products/${id}`, {\n      method: \"PUT\",\n      body: formData,\n      credentials: \"include\",\n    });\n    \n    if (!res.ok) throw new Error(\"Failed to update product\");\n    return res.json();\n  },\n\n  deleteProduct: async (id: string): Promise<void> => {\n    const res = await apiRequest(\"DELETE\", `/api/admin/products/${id}`);\n    if (!res.ok) throw new Error(\"Failed to delete product\");\n  },\n};\n","size_bytes":2313},"client/src/components/checkout-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Product, InsertOrder } from \"@shared/schema\";\n\ninterface CheckoutModalProps {\n  isOpen: boolean;\n  product: Product | null;\n  quantity: number;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function CheckoutModal({ \n  isOpen, \n  product, \n  quantity, \n  onClose, \n  onSuccess \n}: CheckoutModalProps) {\n  const [customerData, setCustomerData] = useState({\n    name: \"\",\n    phone: \"\",\n    altPhone: \"\",\n    address: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const orderMutation = useMutation({\n    mutationFn: async (orderData: InsertOrder) => {\n      const res = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Order placed successfully!\",\n        description: \"We'll contact you soon with delivery details.\",\n      });\n      setCustomerData({ name: \"\", phone: \"\", altPhone: \"\", address: \"\" });\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Order failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!product) return;\n\n    const orderData: InsertOrder = {\n      products: [\n        {\n          productId: product.id,\n          quantity,\n        },\n      ],\n      customer: {\n        name: customerData.name,\n        phone: customerData.phone,\n        altPhone: customerData.altPhone || undefined,\n        address: customerData.address,\n      },\n    };\n\n    orderMutation.mutate(orderData);\n  };\n\n  if (!product) return null;\n\n  const totalAmount = product.priceInINR * quantity;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md forest-card\" data-testid=\"modal-checkout\">\n        <DialogHeader>\n          <div className=\"flex justify-between items-start\">\n            <DialogTitle className=\"text-2xl font-serif font-bold\">Checkout</DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-checkout\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"customer-name\">Full Name *</Label>\n            <Input\n              id=\"customer-name\"\n              type=\"text\"\n              placeholder=\"Enter your full name\"\n              value={customerData.name}\n              onChange={(e) => setCustomerData(prev => ({ ...prev, name: e.target.value }))}\n              required\n              disabled={orderMutation.isPending}\n              data-testid=\"input-customer-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"customer-phone\">Phone Number *</Label>\n            <Input\n              id=\"customer-phone\"\n              type=\"tel\"\n              placeholder=\"+91 98765 43210\"\n              value={customerData.phone}\n              onChange={(e) => setCustomerData(prev => ({ ...prev, phone: e.target.value }))}\n              required\n              disabled={orderMutation.isPending}\n              data-testid=\"input-customer-phone\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"customer-alt-phone\">Alternative Phone</Label>\n            <Input\n              id=\"customer-alt-phone\"\n              type=\"tel\"\n              placeholder=\"Alternative contact\"\n              value={customerData.altPhone}\n              onChange={(e) => setCustomerData(prev => ({ ...prev, altPhone: e.target.value }))}\n              disabled={orderMutation.isPending}\n              data-testid=\"input-customer-alt-phone\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"customer-address\">Address *</Label>\n            <Textarea\n              id=\"customer-address\"\n              placeholder=\"Enter your complete address\"\n              value={customerData.address}\n              onChange={(e) => setCustomerData(prev => ({ ...prev, address: e.target.value }))}\n              required\n              disabled={orderMutation.isPending}\n              className=\"h-20\"\n              data-testid=\"input-customer-address\"\n            />\n          </div>\n          \n          <div className=\"border-t border-border pt-4\">\n            <div className=\"space-y-2 mb-4\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Product:</span>\n                <span data-testid=\"text-checkout-product\">{product.name}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Quantity:</span>\n                <span data-testid=\"text-checkout-quantity\">{quantity}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Unit Price:</span>\n                <span data-testid=\"text-checkout-unit-price\">{formatPrice(product.priceInINR)}</span>\n              </div>\n              <div className=\"flex justify-between items-center font-semibold text-lg border-t border-border pt-2\">\n                <span>Total Amount:</span>\n                <span className=\"text-accent\" data-testid=\"text-checkout-total\">\n                  {formatPrice(totalAmount)}\n                </span>\n              </div>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={orderMutation.isPending}\n              data-testid=\"button-place-order\"\n            >\n              {orderMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Placing Order...\n                </>\n              ) : (\n                \"Place Order\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6787},"client/src/components/forest-animation.tsx":{"content":"export default function ForestAnimation() {\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden z-0\">\n      <div className=\"leaf-particle\" />\n      <div className=\"leaf-particle\" />\n      <div className=\"leaf-particle\" />\n      <div className=\"leaf-particle\" />\n      <div className=\"leaf-particle\" />\n    </div>\n  );\n}\n","size_bytes":349},"client/src/components/product-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product;\n  onClick: () => void;\n}\n\nexport default function ProductCard({ product, onClick }: ProductCardProps) {\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  return (\n    <Card \n      className=\"forest-card cursor-pointer transform hover:scale-105 transition-all duration-200 overflow-hidden\"\n      onClick={onClick}\n      data-testid={`card-product-${product.id}`}\n    >\n      {product.images.length > 0 ? (\n        <img \n          src={product.images[0]} \n          alt={product.name}\n          className=\"w-full h-48 object-cover\"\n          data-testid={`img-product-${product.id}`}\n        />\n      ) : (\n        <div className=\"w-full h-48 bg-muted flex items-center justify-center text-4xl\">\n          {product.type === \"pet\" ? \"üêæ\" : product.type === \"food\" ? \"ü•ò\" : \"üéæ\"}\n        </div>\n      )}\n      <CardContent className=\"p-4\">\n        <h3 className=\"font-semibold text-lg mb-2\" data-testid={`text-name-${product.id}`}>\n          {product.name}\n        </h3>\n        {product.species && (\n          <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-species-${product.id}`}>\n            {product.type.charAt(0).toUpperCase() + product.type.slice(1)} ‚Ä¢ {product.species}\n          </p>\n        )}\n        <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`text-description-${product.id}`}>\n          {product.description}\n        </p>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-xl font-bold text-accent\" data-testid={`text-price-${product.id}`}>\n            {formatPrice(product.priceInINR)}\n          </span>\n          <span className=\"text-sm text-muted-foreground\" data-testid={`text-stock-${product.id}`}>\n            {product.stock > 0 ? `In Stock: ${product.stock}` : \"Out of Stock\"}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2173},"client/src/components/product-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Minus, Plus, X } from \"lucide-react\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductModalProps {\n  product: Product | null;\n  quantity: number;\n  onQuantityChange: (quantity: number) => void;\n  onClose: () => void;\n  onBuyNow: () => void;\n}\n\nexport default function ProductModal({ \n  product, \n  quantity, \n  onQuantityChange, \n  onClose, \n  onBuyNow \n}: ProductModalProps) {\n  if (!product) return null;\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const handleQuantityDecrease = () => {\n    if (quantity > 1) {\n      onQuantityChange(quantity - 1);\n    }\n  };\n\n  const handleQuantityIncrease = () => {\n    if (quantity < product.stock) {\n      onQuantityChange(quantity + 1);\n    }\n  };\n\n  const totalPrice = product.priceInINR * quantity;\n\n  return (\n    <Dialog open={!!product} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto forest-card\" data-testid=\"modal-product\">\n        <DialogHeader>\n          <div className=\"flex justify-between items-start\">\n            <DialogTitle className=\"text-2xl font-serif font-bold\" data-testid=\"text-product-name\">\n              {product.name}\n            </DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-modal\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            {product.images.length > 0 ? (\n              <img \n                src={product.images[0]} \n                alt={product.name}\n                className=\"w-full rounded-xl\"\n                data-testid=\"img-product-modal\"\n              />\n            ) : (\n              <div className=\"w-full aspect-square rounded-xl bg-muted flex items-center justify-center text-6xl\">\n                {product.type === \"pet\" ? \"üêæ\" : product.type === \"food\" ? \"ü•ò\" : \"üéæ\"}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Description</h3>\n              <p className=\"text-muted-foreground\" data-testid=\"text-product-description\">\n                {product.description}\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Details</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Type:</span>\n                  <Badge variant=\"secondary\" data-testid=\"badge-product-type\">\n                    {product.type.charAt(0).toUpperCase() + product.type.slice(1)}\n                  </Badge>\n                </div>\n                {product.species && (\n                  <div className=\"flex justify-between\">\n                    <span>Species:</span>\n                    <span data-testid=\"text-product-species\">{product.species}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span>Available:</span>\n                  <span data-testid=\"text-product-stock\">\n                    {product.stock > 0 ? `${product.stock} in stock` : \"Out of stock\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"border-t border-border pt-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <span className=\"text-2xl font-bold text-accent\" data-testid=\"text-product-price\">\n                  {formatPrice(product.priceInINR)}\n                </span>\n              </div>\n              \n              <div className=\"flex items-center space-x-4 mb-4\">\n                <label className=\"block text-sm font-medium\">Quantity:</label>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleQuantityDecrease}\n                    disabled={quantity <= 1}\n                    data-testid=\"button-quantity-decrease\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  <span className=\"w-12 text-center\" data-testid=\"text-quantity\">\n                    {quantity}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleQuantityIncrease}\n                    disabled={quantity >= product.stock}\n                    data-testid=\"button-quantity-increase\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {quantity > 1 && (\n                <div className=\"mb-4\">\n                  <div className=\"flex justify-between text-lg font-semibold\">\n                    <span>Total:</span>\n                    <span className=\"text-accent\" data-testid=\"text-total-price\">\n                      {formatPrice(totalPrice)}\n                    </span>\n                  </div>\n                </div>\n              )}\n              \n              <Button \n                className=\"w-full\"\n                onClick={onBuyNow}\n                disabled={product.stock === 0}\n                data-testid=\"button-buy-now\"\n              >\n                {product.stock === 0 ? \"Out of Stock\" : \"Buy Now\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5979},"client/src/components/success-modal.tsx":{"content":"import { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SuccessModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function SuccessModal({ isOpen, onClose }: SuccessModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md forest-card text-center animate-surprise\" data-testid=\"modal-success\">\n        <div className=\"p-8\">\n          <div className=\"text-6xl mb-4 animate-bounce\">üéâ</div>\n          <h2 className=\"text-2xl font-serif font-bold mb-4\" data-testid=\"text-success-title\">\n            Order Placed Successfully!\n          </h2>\n          <p className=\"text-muted-foreground mb-6\" data-testid=\"text-success-message\">\n            Thank you for your purchase! We'll contact you soon with delivery details.\n          </p>\n          <Button \n            onClick={onClose}\n            className=\"px-6 py-3 font-semibold\"\n            data-testid=\"button-continue-shopping\"\n          >\n            Continue Shopping\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1147},"client/src/context/app-context.tsx":{"content":"import { createContext, useContext, ReactNode, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useSocket } from \"@/hooks/use-socket\";\nimport type { Category, Product, Order } from \"@shared/schema\";\n\ninterface AppContextType {\n  categories: Category[] | undefined;\n  products: Product[] | undefined;\n  orders: Order[] | undefined;\n  isLoading: boolean;\n}\n\nconst AppContext = createContext<AppContextType | null>(null);\n\nexport function AppProvider({ children }: { children: ReactNode }) {\n  const { data: categories, refetch: refetchCategories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: products, refetch: refetchProducts } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: orders, refetch: refetchOrders } = useQuery<Order[]>({\n    queryKey: [\"/api/admin/orders\"],\n    queryFn: undefined, // This will only work if user is authenticated\n    retry: false,\n  });\n\n  // Handle WebSocket events for real-time updates\n  useSocket({\n    onCategoryCreated: () => refetchCategories(),\n    onCategoryUpdated: () => refetchCategories(),\n    onCategoryDeleted: () => refetchCategories(),\n    onProductCreated: () => refetchProducts(),\n    onProductUpdated: () => refetchProducts(),\n    onProductDeleted: () => refetchProducts(),\n    onOrderCreated: () => {\n      refetchOrders();\n      refetchProducts(); // Refresh products to update stock\n    },\n    onOrderUpdated: () => refetchOrders(),\n    onSettingsUpdated: () => {\n      // Settings are handled by individual components\n    },\n  });\n\n  const isLoading = !categories && !products;\n\n  return (\n    <AppContext.Provider\n      value={{\n        categories,\n        products,\n        orders,\n        isLoading,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport function useAppContext() {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error(\"useAppContext must be used within an AppProvider\");\n  }\n  return context;\n}\n","size_bytes":2018},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-socket.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useAuth } from \"./use-auth\";\n\ninterface SocketEvents {\n  onCategoryCreated?: (data: any) => void;\n  onCategoryUpdated?: (data: any) => void;\n  onCategoryDeleted?: (data: any) => void;\n  onProductCreated?: (data: any) => void;\n  onProductUpdated?: (data: any) => void;\n  onProductDeleted?: (data: any) => void;\n  onOrderCreated?: (data: any) => void;\n  onOrderUpdated?: (data: any) => void;\n  onSettingsUpdated?: (data: any) => void;\n}\n\nexport function useSocket(events: SocketEvents) {\n  const { user } = useAuth();\n  const socketRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const eventsRef = useRef(events);\n\n  // Update events ref when events change\n  useEffect(() => {\n    eventsRef.current = events;\n  }, [events]);\n\n  useEffect(() => {\n    // Only connect WebSocket if we have events to handle\n    if (Object.keys(events).length === 0) return;\n\n    const connect = () => {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      try {\n        const socket = new WebSocket(wsUrl);\n        socketRef.current = socket;\n\n        socket.onopen = () => {\n          console.log(\"WebSocket connected\");\n          // Clear any reconnect timeout\n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n            reconnectTimeoutRef.current = null;\n          }\n        };\n\n        socket.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            const { event: eventType, data } = message;\n\n            // Map WebSocket events to callback functions\n            switch (eventType) {\n              case \"category:created\":\n                eventsRef.current.onCategoryCreated?.(data);\n                break;\n              case \"category:updated\":\n                eventsRef.current.onCategoryUpdated?.(data);\n                break;\n              case \"category:deleted\":\n                eventsRef.current.onCategoryDeleted?.(data);\n                break;\n              case \"product:created\":\n                eventsRef.current.onProductCreated?.(data);\n                break;\n              case \"product:updated\":\n                eventsRef.current.onProductUpdated?.(data);\n                break;\n              case \"product:deleted\":\n                eventsRef.current.onProductDeleted?.(data);\n                break;\n              case \"order:created\":\n                eventsRef.current.onOrderCreated?.(data);\n                break;\n              case \"order:updated\":\n                eventsRef.current.onOrderUpdated?.(data);\n                break;\n              case \"settings:updated\":\n                eventsRef.current.onSettingsUpdated?.(data);\n                break;\n              default:\n                console.log(\"Unknown WebSocket event:\", eventType);\n            }\n          } catch (error) {\n            console.error(\"Error parsing WebSocket message:\", error);\n          }\n        };\n\n        socket.onclose = (event) => {\n          console.log(\"WebSocket disconnected:\", event.code, event.reason);\n          socketRef.current = null;\n          \n          // Attempt to reconnect after a delay\n          if (!reconnectTimeoutRef.current) {\n            reconnectTimeoutRef.current = setTimeout(() => {\n              console.log(\"Attempting to reconnect WebSocket...\");\n              connect();\n            }, 3000);\n          }\n        };\n\n        socket.onerror = (error) => {\n          console.error(\"WebSocket error:\", error);\n        };\n      } catch (error) {\n        console.error(\"Failed to create WebSocket connection:\", error);\n      }\n    };\n\n    connect();\n\n    // Cleanup function\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n      \n      if (socketRef.current) {\n        socketRef.current.close();\n        socketRef.current = null;\n      }\n    };\n  }, []); // Empty dependency array since we use refs for events\n\n  // Return connection status\n  return {\n    isConnected: socketRef.current?.readyState === WebSocket.OPEN,\n  };\n}\n","size_bytes":4271},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":675},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import AdminLayout from \"@/components/admin/admin-layout\";\n\nexport default function AdminDashboard() {\n  return <AdminLayout />;\n}\n","size_bytes":131},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { Redirect } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport ForestAnimation from \"@/components/forest-animation\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({ username: \"\", password: \"\", confirmPassword: \"\" });\n\n  // Redirect if user is already logged in\n  if (user) {\n    return <Redirect to=\"/admin\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (registerData.password !== registerData.confirmPassword) {\n      return; // Handle password mismatch\n    }\n    registerMutation.mutate({\n      username: registerData.username,\n      password: registerData.password,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground flex\">\n      <ForestAnimation />\n      \n      {/* Left side - Auth Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8 relative z-10\">\n        <Card className=\"w-full max-w-md forest-card\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-serif font-bold mb-2\">\n              üå≤ PetShopForest Admin\n            </CardTitle>\n            <p className=\"text-muted-foreground\">Access the admin dashboard</p>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n              </TabsList>\n              \n              {/* Login Form */}\n              <TabsContent value=\"login\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"login-username\">Username</Label>\n                    <Input\n                      id=\"login-username\"\n                      type=\"text\"\n                      placeholder=\"Enter your username\"\n                      value={loginData.username}\n                      onChange={(e) => setLoginData(prev => ({ ...prev, username: e.target.value }))}\n                      required\n                      disabled={loginMutation.isPending}\n                      data-testid=\"input-login-username\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      value={loginData.password}\n                      onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      disabled={loginMutation.isPending}\n                      data-testid=\"input-login-password\"\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-login\"\n                  >\n                    {loginMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Signing In...\n                      </>\n                    ) : (\n                      \"Sign In\"\n                    )}\n                  </Button>\n                </form>\n              </TabsContent>\n              \n              {/* Register Form */}\n              <TabsContent value=\"register\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"register-username\">Username</Label>\n                    <Input\n                      id=\"register-username\"\n                      type=\"text\"\n                      placeholder=\"Choose a username\"\n                      value={registerData.username}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, username: e.target.value }))}\n                      required\n                      disabled={registerMutation.isPending}\n                      data-testid=\"input-register-username\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      placeholder=\"Choose a password\"\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                      disabled={registerMutation.isPending}\n                      data-testid=\"input-register-password\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      type=\"password\"\n                      placeholder=\"Confirm your password\"\n                      value={registerData.confirmPassword}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      required\n                      disabled={registerMutation.isPending}\n                      data-testid=\"input-register-confirm-password\"\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={registerMutation.isPending || registerData.password !== registerData.confirmPassword}\n                    data-testid=\"button-register\"\n                  >\n                    {registerMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Creating Account...\n                      </>\n                    ) : (\n                      \"Create Account\"\n                    )}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Right side - Hero Section */}\n      <div className=\"hidden lg:flex flex-1 items-center justify-center p-8 relative z-10\">\n        <div className=\"text-center max-w-lg\">\n          <h2 className=\"text-4xl font-serif font-bold mb-6\">\n            Manage Your <span className=\"text-accent\">Forest</span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Control your pet shop inventory, orders, and settings from the admin dashboard. \n            Keep track of your forest friends and help them find loving homes.\n          </p>\n          <div className=\"grid grid-cols-2 gap-4 text-left\">\n            <div className=\"forest-card p-4 rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">üì¶ Product Management</h3>\n              <p className=\"text-sm text-muted-foreground\">Add and manage pets, food, and accessories</p>\n            </div>\n            <div className=\"forest-card p-4 rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">üìã Order Tracking</h3>\n              <p className=\"text-sm text-muted-foreground\">Monitor and update order statuses</p>\n            </div>\n            <div className=\"forest-card p-4 rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">üè∑Ô∏è Categories</h3>\n              <p className=\"text-sm text-muted-foreground\">Organize products by categories</p>\n            </div>\n            <div className=\"forest-card p-4 rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">‚öôÔ∏è Site Settings</h3>\n              <p className=\"text-sm text-muted-foreground\">Update store description and content</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8729},"client/src/pages/home-page.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MapPin, Phone, Mail, Clock } from \"lucide-react\";\nimport ForestAnimation from \"@/components/forest-animation\";\nimport ProductCard from \"@/components/product-card\";\nimport ProductModal from \"@/components/product-modal\";\nimport CheckoutModal from \"@/components/checkout-modal\";\nimport SuccessModal from \"@/components/success-modal\";\nimport { useAppContext } from \"@/context/app-context\";\nimport type { Product, Category, SiteSettings } from \"@shared/schema\";\n\nexport default function HomePage() {\n  const [activeSection, setActiveSection] = useState(\"home\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);\n  const [isSuccessOpen, setIsSuccessOpen] = useState(false);\n  const [quantity, setQuantity] = useState(1);\n\n  const { categories, products } = useAppContext();\n\n  const { data: siteSettings } = useQuery<SiteSettings>({\n    queryKey: [\"/api/public/settings\"],\n  });\n\n  const filteredProducts = products?.filter(product => {\n    if (selectedCategory === \"all\") return true;\n    return product.categoryId === selectedCategory || product.type === selectedCategory;\n  }) || [];\n\n  const getYouTubeEmbedUrl = (url: string) => {\n    if (!url) return \"\";\n    const videoId = url.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/);\n    return videoId ? `https://www.youtube.com/embed/${videoId[1]}` : url;\n  };\n\n  const handleProductClick = (product: Product) => {\n    setSelectedProduct(product);\n    setQuantity(1);\n  };\n\n  const handleBuyNow = () => {\n    setSelectedProduct(null);\n    setIsCheckoutOpen(true);\n  };\n\n  const handleOrderSuccess = () => {\n    setIsCheckoutOpen(false);\n    setIsSuccessOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <ForestAnimation />\n      \n      {/* Navigation */}\n      <nav className=\"fixed top-0 w-full z-50 border-b border-border backdrop-blur-md bg-background/80\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-xl font-serif font-bold text-accent\">üå≤ PetShopForest</h1>\n            </div>\n            <div className=\"hidden md:flex space-x-6\">\n              <button \n                onClick={() => setActiveSection(\"home\")}\n                className={`text-muted-foreground hover:text-foreground transition-colors ${activeSection === \"home\" ? \"text-foreground\" : \"\"}`}\n                data-testid=\"nav-home\"\n              >\n                Home\n              </button>\n              <button \n                onClick={() => setActiveSection(\"products\")}\n                className={`text-muted-foreground hover:text-foreground transition-colors ${activeSection === \"products\" ? \"text-foreground\" : \"\"}`}\n                data-testid=\"nav-shop\"\n              >\n                Shop\n              </button>\n              <button \n                onClick={() => setActiveSection(\"contact\")}\n                className={`text-muted-foreground hover:text-foreground transition-colors ${activeSection === \"contact\" ? \"text-foreground\" : \"\"}`}\n                data-testid=\"nav-contact\"\n              >\n                Contact\n              </button>\n              <Link href=\"/auth\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"nav-admin\">\n                  Admin\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 pt-16\">\n        \n        {/* Home Section */}\n        {activeSection === \"home\" && (\n          <section className=\"animate-fade-in\" data-testid=\"section-home\">\n            <div className=\"container mx-auto px-4 py-12\">\n              {/* Hero Section */}\n              <div className=\"text-center mb-16\">\n                <h1 className=\"text-4xl md:text-6xl font-serif font-bold mb-6 text-foreground\">\n                  Welcome to the <span className=\"text-accent\">Forest</span>\n                </h1>\n                <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"text-description\">\n                  {siteSettings?.description || \"Discover a magical world of pets, premium food, and accessories in our enchanted forest marketplace.\"}\n                </p>\n                <Button \n                  onClick={() => setActiveSection(\"products\")}\n                  className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all\"\n                  data-testid=\"button-explore\"\n                >\n                  Explore Our Collection\n                </Button>\n              </div>\n\n              {/* YouTube Video Section */}\n              {siteSettings?.youtubeUrl && (\n                <div className=\"max-w-4xl mx-auto mb-16\">\n                  <div className=\"forest-card rounded-2xl p-8\">\n                    <h3 className=\"text-2xl font-serif font-semibold mb-6 text-center\">Meet Our Forest Friends</h3>\n                    <div className=\"aspect-video rounded-xl overflow-hidden bg-muted\">\n                      <iframe \n                        width=\"100%\" \n                        height=\"100%\" \n                        src={getYouTubeEmbedUrl(siteSettings.youtubeUrl)}\n                        title=\"Pet Shop Forest Video\" \n                        frameBorder=\"0\" \n                        allowFullScreen\n                        data-testid=\"video-youtube\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Features Grid */}\n              <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n                <div className=\"forest-card rounded-xl p-6 text-center transform hover:scale-105 transition-all\">\n                  <div className=\"text-3xl text-accent mb-4\">üêï</div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Healthy Pets</h3>\n                  <p className=\"text-muted-foreground\">Carefully selected companions from trusted breeders</p>\n                </div>\n                <div className=\"forest-card rounded-xl p-6 text-center transform hover:scale-105 transition-all\">\n                  <div className=\"text-3xl text-accent mb-4\">ü•ò</div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Premium Food</h3>\n                  <p className=\"text-muted-foreground\">Nutritious meals for every stage of life</p>\n                </div>\n                <div className=\"forest-card rounded-xl p-6 text-center transform hover:scale-105 transition-all\">\n                  <div className=\"text-3xl text-accent mb-4\">üéæ</div>\n                  <h3 className=\"text-xl font-semibold mb-2\">Quality Accessories</h3>\n                  <p className=\"text-muted-foreground\">Everything your pet needs to thrive</p>\n                </div>\n              </div>\n            </div>\n          </section>\n        )}\n\n        {/* Products Section */}\n        {activeSection === \"products\" && (\n          <section className=\"animate-fade-in\" data-testid=\"section-products\">\n            <div className=\"container mx-auto px-4 py-12\">\n              <div className=\"text-center mb-12\">\n                <h2 className=\"text-3xl md:text-5xl font-serif font-bold mb-4\">Our Forest Collection</h2>\n                <p className=\"text-xl text-muted-foreground\">Browse by category to find the perfect companions and supplies</p>\n              </div>\n\n              {/* Category Navigation */}\n              <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n                <Button\n                  variant={selectedCategory === \"all\" ? \"default\" : \"secondary\"}\n                  onClick={() => setSelectedCategory(\"all\")}\n                  data-testid=\"filter-all\"\n                >\n                  All Items\n                </Button>\n                {categories?.map((category) => (\n                  <Button\n                    key={category.id}\n                    variant={selectedCategory === category.id ? \"default\" : \"secondary\"}\n                    onClick={() => setSelectedCategory(category.id)}\n                    data-testid={`filter-${category.slug}`}\n                  >\n                    {category.name}\n                  </Button>\n                ))}\n                <Button\n                  variant={selectedCategory === \"pet\" ? \"default\" : \"secondary\"}\n                  onClick={() => setSelectedCategory(\"pet\")}\n                  data-testid=\"filter-pets\"\n                >\n                  Pets\n                </Button>\n                <Button\n                  variant={selectedCategory === \"food\" ? \"default\" : \"secondary\"}\n                  onClick={() => setSelectedCategory(\"food\")}\n                  data-testid=\"filter-food\"\n                >\n                  Food\n                </Button>\n                <Button\n                  variant={selectedCategory === \"accessory\" ? \"default\" : \"secondary\"}\n                  onClick={() => setSelectedCategory(\"accessory\")}\n                  data-testid=\"filter-accessories\"\n                >\n                  Accessories\n                </Button>\n              </div>\n\n              {/* Products Grid */}\n              <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n                {filteredProducts.map((product) => (\n                  <ProductCard\n                    key={product.id}\n                    product={product}\n                    onClick={() => handleProductClick(product)}\n                  />\n                ))}\n                {filteredProducts.length === 0 && (\n                  <div className=\"col-span-full text-center py-12\" data-testid=\"text-no-products\">\n                    <p className=\"text-muted-foreground text-lg\">No products found in this category.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </section>\n        )}\n\n        {/* Contact Section */}\n        {activeSection === \"contact\" && (\n          <section className=\"animate-fade-in\" data-testid=\"section-contact\">\n            <div className=\"container mx-auto px-4 py-12\">\n              <div className=\"text-center mb-12\">\n                <h2 className=\"text-3xl md:text-5xl font-serif font-bold mb-4\">Visit Our Forest</h2>\n                <p className=\"text-xl text-muted-foreground\">Come experience our magical pet paradise in person</p>\n              </div>\n\n              <div className=\"grid lg:grid-cols-2 gap-12\">\n                {/* Contact Information */}\n                <Card className=\"forest-card\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-serif font-semibold mb-6\">Get in Touch</h3>\n                    \n                    <div className=\"space-y-6\">\n                      <div className=\"flex items-start space-x-4\">\n                        <MapPin className=\"text-accent mt-1\" />\n                        <div>\n                          <h4 className=\"font-semibold\">Address</h4>\n                          <p className=\"text-muted-foreground\" data-testid=\"text-address\">\n                            123 Forest Grove Lane<br />\n                            Mumbai, Maharashtra 400001<br />\n                            India\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-start space-x-4\">\n                        <Phone className=\"text-accent mt-1\" />\n                        <div>\n                          <h4 className=\"font-semibold\">Phone</h4>\n                          <p className=\"text-muted-foreground\" data-testid=\"text-phone\">+91 98765 43210</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-start space-x-4\">\n                        <Mail className=\"text-accent mt-1\" />\n                        <div>\n                          <h4 className=\"font-semibold\">Email</h4>\n                          <p className=\"text-muted-foreground\" data-testid=\"text-email\">hello@petshopforest.com</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-start space-x-4\">\n                        <Clock className=\"text-accent mt-1\" />\n                        <div>\n                          <h4 className=\"font-semibold\">Hours</h4>\n                          <p className=\"text-muted-foreground\" data-testid=\"text-hours\">\n                            Monday - Saturday: 9:00 AM - 8:00 PM<br />\n                            Sunday: 10:00 AM - 6:00 PM\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Map Embed */}\n                <Card className=\"forest-card\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-serif font-semibold mb-6\">Location Map</h3>\n                    <div className=\"aspect-video rounded-xl overflow-hidden bg-muted\">\n                      <iframe \n                        src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3771.0223729665743!2d72.82229631490195!3d19.08230198709806!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3be7ce9a6d804d5d%3A0x3d79de3b6b0a6d99!2sMumbai%2C%20Maharashtra%2C%20India!5e0!3m2!1sen!2sus!4v1635789012345!5m2!1sen!2sus\"\n                        width=\"100%\" \n                        height=\"100%\" \n                        style={{ border: 0 }}\n                        allowFullScreen\n                        loading=\"lazy\" \n                        referrerPolicy=\"no-referrer-when-downgrade\"\n                        data-testid=\"map-location\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </section>\n        )}\n      </div>\n\n      {/* Modals */}\n      <ProductModal\n        product={selectedProduct}\n        quantity={quantity}\n        onQuantityChange={setQuantity}\n        onClose={() => setSelectedProduct(null)}\n        onBuyNow={handleBuyNow}\n      />\n      \n      <CheckoutModal\n        isOpen={isCheckoutOpen}\n        product={selectedProduct}\n        quantity={quantity}\n        onClose={() => setIsCheckoutOpen(false)}\n        onSuccess={handleOrderSuccess}\n      />\n      \n      <SuccessModal\n        isOpen={isSuccessOpen}\n        onClose={() => {\n          setIsSuccessOpen(false);\n          setActiveSection(\"products\");\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":15148},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/admin-home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ShoppingCart, Package, Tags, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAppContext } from \"@/context/app-context\";\nimport type { SiteSettings, UpdateSiteSettings } from \"@shared/schema\";\n\nexport default function AdminHome() {\n  const [settingsData, setSettingsData] = useState<UpdateSiteSettings>({\n    description: \"\",\n    youtubeUrl: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { categories, products, orders } = useAppContext();\n\n  const { data: siteSettings, isLoading: settingsLoading } = useQuery<SiteSettings>({\n    queryKey: [\"/api/public/settings\"],\n  });\n\n  // Set initial data when settings load\n  useEffect(() => {\n    if (siteSettings) {\n      setSettingsData({\n        description: siteSettings.description,\n        youtubeUrl: siteSettings.youtubeUrl,\n      });\n    }\n  }, [siteSettings]);\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: UpdateSiteSettings) => {\n      const res = await apiRequest(\"PUT\", \"/api/admin/site\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/public/settings\"] });\n      toast({ title: \"Site settings updated successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to update settings\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateSettingsMutation.mutate(settingsData);\n  };\n\n\n  const totalOrders = orders?.length || 0;\n  const activeProducts = products?.filter(p => p.available && p.stock > 0).length || 0;\n  const totalCategories = categories?.length || 0;\n  const totalRevenue = orders?.reduce((sum, order) => sum + order.totalAmountINR, 0) || 0;\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-serif font-bold mb-2\">Dashboard</h2>\n        <p className=\"text-muted-foreground\">Welcome to your pet shop administration panel</p>\n      </div>\n\n      {/* Site Settings */}\n      <Card className=\"forest-card\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-serif\">Store Settings</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"store-description\">Store Description</Label>\n              <Textarea\n                id=\"store-description\"\n                placeholder=\"Enter store description...\"\n                value={settingsData.description}\n                onChange={(e) => setSettingsData(prev => ({ ...prev, description: e.target.value }))}\n                disabled={updateSettingsMutation.isPending || settingsLoading}\n                className=\"h-32\"\n                data-testid=\"input-store-description\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                This description will appear on your homepage.\n              </p>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"youtube-url\">YouTube Video URL</Label>\n              <Input\n                id=\"youtube-url\"\n                type=\"url\"\n                placeholder=\"https://www.youtube.com/watch?v=...\"\n                value={settingsData.youtubeUrl}\n                onChange={(e) => setSettingsData(prev => ({ ...prev, youtubeUrl: e.target.value }))}\n                disabled={updateSettingsMutation.isPending || settingsLoading}\n                data-testid=\"input-youtube-url\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Add a YouTube video to showcase on your homepage.\n              </p>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              disabled={updateSettingsMutation.isPending || settingsLoading}\n              data-testid=\"button-save-settings\"\n            >\n              {updateSettingsMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                \"Save Changes\"\n              )}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"forest-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-orders\">{totalOrders}</div>\n            <p className=\"text-xs text-muted-foreground\">All time orders</p>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"forest-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Products</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-active-products\">{activeProducts}</div>\n            <p className=\"text-xs text-muted-foreground\">Products in stock</p>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"forest-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Categories</CardTitle>\n            <Tags className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-categories\">{totalCategories}</div>\n            <p className=\"text-xs text-muted-foreground\">Product categories</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"forest-card\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <div className=\"text-accent\">‚Çπ</div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-revenue\">\n              {formatPrice(totalRevenue)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">All time revenue</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent activity */}\n      <Card className=\"forest-card\">\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {orders?.length === 0 && products?.length === 0 && categories?.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-activity\">\n              No recent activity. Start by adding some categories and products.\n            </p>\n          ) : (\n            <div className=\"space-y-3\">\n              {orders?.slice(0, 5).map((order, index) => (\n                <div key={order.id} className=\"flex items-center justify-between py-2 border-b border-border last:border-0\" data-testid={`item-recent-order-${index}`}>\n                  <div>\n                    <p className=\"font-medium\">New order from {order.customer.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {formatPrice(order.totalAmountINR)} ‚Ä¢ {new Date(order.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"text-sm text-accent\">#{order.id.slice(-8)}</div>\n                </div>\n              ))}\n              {orders?.length === 0 && (\n                <p className=\"text-muted-foreground text-center py-4\" data-testid=\"text-no-recent-orders\">\n                  No recent orders.\n                </p>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8818},"client/src/components/admin/admin-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  Home, \n  Package, \n  ShoppingCart, \n  Tags, \n  LogOut,\n  Menu \n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport ProductsManagement from \"./products-management\";\nimport OrdersManagement from \"./orders-management\";\nimport CategoriesManagement from \"./categories-management\";\nimport AdminHome from \"./admin-home\";\n\ntype AdminPage = \"dashboard\" | \"products\" | \"orders\" | \"categories\";\n\nexport default function AdminLayout() {\n  const [currentPage, setCurrentPage] = useState<AdminPage>(\"dashboard\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const navigation = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: Home },\n    { id: \"orders\", label: \"Orders\", icon: ShoppingCart },\n    { id: \"products\", label: \"Products\", icon: Package },\n    { id: \"categories\", label: \"Categories\", icon: Tags },\n  ];\n\n  const renderContent = () => {\n    switch (currentPage) {\n      case \"dashboard\":\n        return <AdminHome />;\n      case \"products\":\n        return <ProductsManagement />;\n      case \"orders\":\n        return <OrdersManagement />;\n      case \"categories\":\n        return <CategoriesManagement />;\n      default:\n        return <AdminHome />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"flex flex-col lg:flex-row\">\n        {/* Mobile header */}\n        <div className=\"lg:hidden border-b border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-xl font-serif font-bold text-accent\">üå≤ Admin</h1>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Sidebar */}\n        <div className={`lg:w-64 border-r border-border ${sidebarOpen ? 'block' : 'hidden lg:block'}`}>\n          <div className=\"p-6\">\n            <h1 className=\"hidden lg:block text-xl font-serif font-bold text-accent mb-6\">\n              üå≤ PetShopForest Admin\n            </h1>\n            \n            {/* User info */}\n            <div className=\"flex items-center space-x-3 mb-6 p-3 forest-card rounded-lg\">\n              <Avatar>\n                <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                  {user?.username?.charAt(0).toUpperCase() || \"A\"}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h3 className=\"font-semibold\" data-testid=\"text-admin-username\">\n                  {user?.username || \"Admin\"}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">Administrator</p>\n              </div>\n            </div>\n            \n            {/* Navigation */}\n            <nav className=\"space-y-2\">\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Button\n                    key={item.id}\n                    variant={currentPage === item.id ? \"default\" : \"ghost\"}\n                    className=\"w-full justify-start\"\n                    onClick={() => {\n                      setCurrentPage(item.id as AdminPage);\n                      setSidebarOpen(false);\n                    }}\n                    data-testid={`nav-${item.id}`}\n                  >\n                    <Icon className=\"mr-2 h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                );\n              })}\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-destructive hover:text-destructive hover:bg-destructive/10\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Logout\n              </Button>\n            </nav>\n          </div>\n        </div>\n\n        {/* Main content */}\n        <div className=\"flex-1 p-6\">\n          {renderContent()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4490},"client/src/components/admin/categories-management.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Edit, Trash2, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAppContext } from \"@/context/app-context\";\nimport type { Category, InsertCategory } from \"@shared/schema\";\n\nexport default function CategoriesManagement() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [categoryData, setCategoryData] = useState<InsertCategory>({\n    name: \"\",\n    description: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { categories } = useAppContext();\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/categories\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Category created successfully\" });\n      handleCloseDialog();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to create category\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertCategory }) => {\n      const res = await apiRequest(\"PUT\", `/api/admin/categories/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Category updated successfully\" });\n      handleCloseDialog();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to update category\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/admin/categories/${id}`);\n      return res;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Category deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to delete category\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleCreate = () => {\n    setEditingCategory(null);\n    setCategoryData({ name: \"\", description: \"\" });\n    setIsCreateOpen(true);\n  };\n\n  const handleEdit = (category: Category) => {\n    setEditingCategory(category);\n    setCategoryData({\n      name: category.name,\n      description: category.description,\n    });\n    setIsCreateOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsCreateOpen(false);\n    setEditingCategory(null);\n    setCategoryData({ name: \"\", description: \"\" });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data: categoryData });\n    } else {\n      createCategoryMutation.mutate(categoryData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this category? This action cannot be undone.\")) {\n      deleteCategoryMutation.mutate(id);\n    }\n  };\n\n  const isLoading = createCategoryMutation.isPending || updateCategoryMutation.isPending;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-serif font-bold mb-2\">Category Management</h2>\n          <p className=\"text-muted-foreground\">Organize your products with categories</p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleCreate} data-testid=\"button-add-category\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Category\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md forest-card\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingCategory ? \"Edit Category\" : \"Create New Category\"}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"category-name\">Name *</Label>\n                <Input\n                  id=\"category-name\"\n                  type=\"text\"\n                  placeholder=\"Category name\"\n                  value={categoryData.name}\n                  onChange={(e) => setCategoryData(prev => ({ ...prev, name: e.target.value }))}\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-category-name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"category-description\">Description</Label>\n                <Textarea\n                  id=\"category-description\"\n                  placeholder=\"Category description\"\n                  value={categoryData.description}\n                  onChange={(e) => setCategoryData(prev => ({ ...prev, description: e.target.value }))}\n                  disabled={isLoading}\n                  className=\"h-20\"\n                  data-testid=\"input-category-description\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog} disabled={isLoading}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-category\">\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      {editingCategory ? \"Updating...\" : \"Creating...\"}\n                    </>\n                  ) : (\n                    editingCategory ? \"Update Category\" : \"Create Category\"\n                  )}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Categories List */}\n      <div className=\"space-y-4\">\n        {categories?.map((category) => (\n          <Card key={category.id} className=\"forest-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-lg mb-2\" data-testid={`text-category-name-${category.id}`}>\n                    {category.name}\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm\" data-testid={`text-category-description-${category.id}`}>\n                    {category.description || \"No description provided\"}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Slug: <span className=\"font-mono\" data-testid={`text-category-slug-${category.id}`}>{category.slug}</span>\n                  </p>\n                </div>\n                <div className=\"flex space-x-2 ml-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(category)}\n                    data-testid={`button-edit-category-${category.id}`}\n                  >\n                    <Edit className=\"h-4 w-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(category.id)}\n                    disabled={deleteCategoryMutation.isPending}\n                    data-testid={`button-delete-category-${category.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n        \n        {categories?.length === 0 && (\n          <Card className=\"forest-card\">\n            <CardContent className=\"p-12 text-center\" data-testid=\"text-no-categories\">\n              <p className=\"text-muted-foreground text-lg\">No categories found. Create your first category to get started.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8935},"client/src/components/admin/orders-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Eye, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Order } from \"@shared/schema\";\n\nexport default function OrdersManagement() {\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/admin/orders\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const res = await apiRequest(\"PUT\", `/api/admin/orders/${id}/status`, { status });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders\"] });\n      toast({ title: \"Order status updated successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to update order status\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-500/20 text-yellow-400\";\n      case \"completed\":\n        return \"bg-green-500/20 text-green-400\";\n      case \"cancelled\":\n        return \"bg-red-500/20 text-red-400\";\n      default:\n        return \"bg-gray-500/20 text-gray-400\";\n    }\n  };\n\n  const handleViewOrder = (order: Order) => {\n    setSelectedOrder(order);\n    setIsDetailOpen(true);\n  };\n\n  const handleStatusUpdate = (orderId: string, newStatus: string) => {\n    updateStatusMutation.mutate({ id: orderId, status: newStatus });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-serif font-bold mb-2\">Order Management</h2>\n        <p className=\"text-muted-foreground\">Monitor and manage customer orders</p>\n      </div>\n\n      <Card className=\"forest-card\">\n        <CardHeader>\n          <CardTitle>All Orders</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {orders?.length === 0 ? (\n            <div className=\"text-center py-8\" data-testid=\"text-no-orders\">\n              <p className=\"text-muted-foreground\">No orders found.</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-border\">\n                    <th className=\"text-left py-3 px-4\">Order ID</th>\n                    <th className=\"text-left py-3 px-4\">Customer</th>\n                    <th className=\"text-left py-3 px-4\">Total</th>\n                    <th className=\"text-left py-3 px-4\">Status</th>\n                    <th className=\"text-left py-3 px-4\">Date</th>\n                    <th className=\"text-left py-3 px-4\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {orders?.map((order) => (\n                    <tr key={order.id} className=\"border-b border-border\" data-testid={`row-order-${order.id}`}>\n                      <td className=\"py-3 px-4\" data-testid={`text-order-id-${order.id}`}>\n                        #{order.id.slice(-8)}\n                      </td>\n                      <td className=\"py-3 px-4\" data-testid={`text-customer-name-${order.id}`}>\n                        {order.customer.name}\n                      </td>\n                      <td className=\"py-3 px-4\" data-testid={`text-order-total-${order.id}`}>\n                        {formatPrice(order.totalAmountINR)}\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <Badge className={getStatusColor(order.status)} data-testid={`badge-order-status-${order.id}`}>\n                          {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                        </Badge>\n                      </td>\n                      <td className=\"py-3 px-4\" data-testid={`text-order-date-${order.id}`}>\n                        {formatDate(order.createdAt)}\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleViewOrder(order)}\n                            data-testid={`button-view-order-${order.id}`}\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                          <Select\n                            value={order.status}\n                            onValueChange={(value) => handleStatusUpdate(order.id, value)}\n                            disabled={updateStatusMutation.isPending}\n                          >\n                            <SelectTrigger className=\"w-32\" data-testid={`select-status-${order.id}`}>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Pending</SelectItem>\n                              <SelectItem value=\"completed\">Completed</SelectItem>\n                              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Order Detail Modal */}\n      <Dialog open={isDetailOpen} onOpenChange={setIsDetailOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto forest-card\" data-testid=\"modal-order-detail\">\n          {selectedOrder && (\n            <>\n              <DialogHeader>\n                <DialogTitle>Order Details - #{selectedOrder.id.slice(-8)}</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                {/* Customer Information */}\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Customer Information</h3>\n                  <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Name:</span>\n                      <span className=\"ml-2\" data-testid=\"text-detail-customer-name\">{selectedOrder.customer.name}</span>\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Phone:</span>\n                      <span className=\"ml-2\" data-testid=\"text-detail-customer-phone\">{selectedOrder.customer.phone}</span>\n                    </div>\n                    {selectedOrder.customer.altPhone && (\n                      <div>\n                        <span className=\"font-medium\">Alt Phone:</span>\n                        <span className=\"ml-2\" data-testid=\"text-detail-customer-alt-phone\">{selectedOrder.customer.altPhone}</span>\n                      </div>\n                    )}\n                    <div className=\"md:col-span-2\">\n                      <span className=\"font-medium\">Address:</span>\n                      <span className=\"ml-2\" data-testid=\"text-detail-customer-address\">{selectedOrder.customer.address}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Products */}\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Products</h3>\n                  <div className=\"space-y-3\">\n                    {selectedOrder.products.map((product, index) => (\n                      <div key={index} className=\"forest-card p-4 rounded-lg\" data-testid={`item-order-product-${index}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-medium\" data-testid={`text-product-name-${index}`}>{product.name}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Quantity: <span data-testid={`text-product-quantity-${index}`}>{product.quantity}</span>\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\" data-testid={`text-product-total-${index}`}>\n                              {formatPrice(product.priceInINR * product.quantity)}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {formatPrice(product.priceInINR)} each\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Order Summary */}\n                <div className=\"border-t border-border pt-4\">\n                  <div className=\"flex justify-between items-center text-lg font-semibold\">\n                    <span>Total Amount:</span>\n                    <span className=\"text-accent\" data-testid=\"text-detail-total\">\n                      {formatPrice(selectedOrder.totalAmountINR)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm text-muted-foreground mt-2\">\n                    <span>Order Date:</span>\n                    <span data-testid=\"text-detail-date\">{formatDate(selectedOrder.createdAt)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm mt-1\">\n                    <span>Status:</span>\n                    <Badge className={getStatusColor(selectedOrder.status)} data-testid=\"badge-detail-status\">\n                      {selectedOrder.status.charAt(0).toUpperCase() + selectedOrder.status.slice(1)}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":11380},"client/src/components/admin/products-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAppContext } from \"@/context/app-context\";\nimport type { Product, InsertProduct, Category } from \"@shared/schema\";\n\nexport default function ProductsManagement() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [productData, setProductData] = useState<Partial<InsertProduct>>({});\n  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { products, categories } = useAppContext();\n\n  const createProductMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const res = await fetch(\"/api/admin/products\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to create product\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Product created successfully\" });\n      handleCloseDialog();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to create product\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, formData }: { id: string; formData: FormData }) => {\n      const res = await fetch(`/api/admin/products/${id}`, {\n        method: \"PUT\",\n        body: formData,\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to update product\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Product updated successfully\" });\n      handleCloseDialog();\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to update product\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/admin/products/${id}`);\n      return res;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Product deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to delete product\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const handleCreate = () => {\n    setEditingProduct(null);\n    setProductData({});\n    setSelectedFiles(null);\n    setIsCreateOpen(true);\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    setProductData(product);\n    setSelectedFiles(null);\n    setIsCreateOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsCreateOpen(false);\n    setEditingProduct(null);\n    setProductData({});\n    setSelectedFiles(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const formData = new FormData();\n    formData.append(\"productData\", JSON.stringify(productData));\n    \n    if (selectedFiles) {\n      Array.from(selectedFiles).forEach(file => {\n        formData.append(\"images\", file);\n      });\n    }\n\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, formData });\n    } else {\n      createProductMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this product?\")) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  const isLoading = createProductMutation.isPending || updateProductMutation.isPending;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-serif font-bold mb-2\">Product Management</h2>\n          <p className=\"text-muted-foreground\">Manage your pet shop inventory</p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleCreate} data-testid=\"button-add-product\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Product\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto forest-card\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProduct ? \"Edit Product\" : \"Create New Product\"}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"product-name\">Name *</Label>\n                  <Input\n                    id=\"product-name\"\n                    type=\"text\"\n                    value={productData.name || \"\"}\n                    onChange={(e) => setProductData(prev => ({ ...prev, name: e.target.value }))}\n                    required\n                    disabled={isLoading}\n                    data-testid=\"input-product-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"product-category\">Category *</Label>\n                  <Select \n                    value={productData.categoryId || \"\"} \n                    onValueChange={(value) => setProductData(prev => ({ ...prev, categoryId: value }))}\n                    disabled={isLoading}\n                  >\n                    <SelectTrigger data-testid=\"select-product-category\">\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories?.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"product-type\">Type *</Label>\n                  <Select \n                    value={productData.type || \"\"} \n                    onValueChange={(value: \"pet\" | \"food\" | \"accessory\") => setProductData(prev => ({ ...prev, type: value }))}\n                    disabled={isLoading}\n                  >\n                    <SelectTrigger data-testid=\"select-product-type\">\n                      <SelectValue placeholder=\"Select type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pet\">Pet</SelectItem>\n                      <SelectItem value=\"food\">Food</SelectItem>\n                      <SelectItem value=\"accessory\">Accessory</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"product-species\">Species</Label>\n                  <Input\n                    id=\"product-species\"\n                    type=\"text\"\n                    placeholder=\"e.g., Dog, Cat, Fish\"\n                    value={productData.species || \"\"}\n                    onChange={(e) => setProductData(prev => ({ ...prev, species: e.target.value }))}\n                    disabled={isLoading}\n                    data-testid=\"input-product-species\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"product-price\">Price (INR) *</Label>\n                  <Input\n                    id=\"product-price\"\n                    type=\"number\"\n                    min=\"1\"\n                    step=\"1\"\n                    value={productData.priceInINR || \"\"}\n                    onChange={(e) => setProductData(prev => ({ ...prev, priceInINR: parseInt(e.target.value) }))}\n                    required\n                    disabled={isLoading}\n                    data-testid=\"input-product-price\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"product-stock\">Stock *</Label>\n                  <Input\n                    id=\"product-stock\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={productData.stock || \"\"}\n                    onChange={(e) => setProductData(prev => ({ ...prev, stock: parseInt(e.target.value) }))}\n                    required\n                    disabled={isLoading}\n                    data-testid=\"input-product-stock\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"product-description\">Description *</Label>\n                <Textarea\n                  id=\"product-description\"\n                  value={productData.description || \"\"}\n                  onChange={(e) => setProductData(prev => ({ ...prev, description: e.target.value }))}\n                  required\n                  disabled={isLoading}\n                  className=\"h-20\"\n                  data-testid=\"input-product-description\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"product-images\">Images</Label>\n                <Input\n                  id=\"product-images\"\n                  type=\"file\"\n                  multiple\n                  accept=\"image/*\"\n                  onChange={(e) => setSelectedFiles(e.target.files)}\n                  disabled={isLoading}\n                  data-testid=\"input-product-images\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Select up to 5 images. Leave empty to keep existing images when editing.\n                </p>\n              </div>\n              \n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleCloseDialog} disabled={isLoading}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isLoading} data-testid=\"button-save-product\">\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      {editingProduct ? \"Updating...\" : \"Creating...\"}\n                    </>\n                  ) : (\n                    editingProduct ? \"Update Product\" : \"Create Product\"\n                  )}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Products Grid */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {products?.map((product) => (\n          <Card key={product.id} className=\"forest-card\">\n            <CardHeader className=\"pb-3\">\n              {product.images.length > 0 ? (\n                <img \n                  src={product.images[0]} \n                  alt={product.name}\n                  className=\"w-full h-32 object-cover rounded-lg\"\n                  data-testid={`img-admin-product-${product.id}`}\n                />\n              ) : (\n                <div className=\"w-full h-32 bg-muted rounded-lg flex items-center justify-center text-4xl\">\n                  {product.type === \"pet\" ? \"üêæ\" : product.type === \"food\" ? \"ü•ò\" : \"üéæ\"}\n                </div>\n              )}\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-start\">\n                  <h3 className=\"font-semibold\" data-testid={`text-admin-product-name-${product.id}`}>\n                    {product.name}\n                  </h3>\n                  <Badge variant=\"secondary\" data-testid={`badge-admin-product-type-${product.id}`}>\n                    {product.type}\n                  </Badge>\n                </div>\n                \n                <p className=\"text-sm text-muted-foreground\" data-testid={`text-admin-product-price-${product.id}`}>\n                  {formatPrice(product.priceInINR)}\n                </p>\n                \n                <p className=\"text-sm text-muted-foreground\" data-testid={`text-admin-product-stock-${product.id}`}>\n                  Stock: {product.stock}\n                </p>\n                \n                <div className=\"flex space-x-2 pt-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(product)}\n                    className=\"flex-1\"\n                    data-testid={`button-edit-product-${product.id}`}\n                  >\n                    <Edit className=\"h-4 w-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(product.id)}\n                    className=\"flex-1\"\n                    disabled={deleteProductMutation.isPending}\n                    data-testid={`button-delete-product-${product.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n        \n        {products?.length === 0 && (\n          <div className=\"col-span-full text-center py-12\" data-testid=\"text-no-products-admin\">\n            <p className=\"text-muted-foreground text-lg\">No products found. Add your first product to get started.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14684},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}